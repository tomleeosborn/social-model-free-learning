score.aov <- aov(totalscore ~ Condition, data = psy15)
fCondition<-factor(psy15$FL_9_DO)
aggregate(data=psy15, psy15$totalscore, list(fCondition), mean)
score.aov <- aov(totalscore ~ fCondition, data = psy15)
summary(score.aov)
library(pwr)
pwr.anova.test(k = 2, n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
library(pwr)
pwr.anova.test(k = 2, n = 220, f = 0.2, sig.level = 0.05, power = NULL)
library(pwr)
pwr.anova.test(k = 2, n = 18, f = 0.2, sig.level = 0.05, power = NULL)
aggregate(data=psy15, psy15$totalscore, list(fCondition), mean)
pwr.anova.test(k = 2, n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
difficult.aov <- aov(psy15$X.4 ~ fCondition, data = psy15)
summary(difficult.aov)
difficult <- strtoi(psy15$X.4)
difficult.aov <- aov(difficult ~ fCondition, data = psy15)
summary(difficult.aov)
aggregate(data=psy15, difficult, list(fCondition), mean)
easy1 <- strtoi(psy15$X)
easy2 <- strtoi(psy15$X.2)
easy <- easy1+easy2
easy.aov <- aov(easy ~ fCondition, data = psy15)
summary(easy.aov)
aggregate(data=psy15, easy, list(fCondition), mean)
aggregate(data=psy15, difficult, list(fCondition), mean)
med1 <- strtoi(psy15$X.1)
med2 <- strtoi(psy15$X.3)
medium <- med1+med2
medium.aov <- aov(medium ~ fCondition, data = psy15)
summary(medium.aov)
aggregate(data=psy15, medium, list(fCondition), mean)
micaela <- read.csv("Desktop/HIGH_NEG_MOOD.csv")
micaela <- read.csv("Desktop/CLEAN_DATA_FULL.csv")
micaela <- micaela[micaela$Exclude.==1, ]
dim(micaela)
summary(micaela)
head(micaela)
pastevents.aov <- aov(Thinking.about.past.events ~ Condition, data = micaela)
summary(pastevents.aov)
presentevents.aov <- aov(Thinking.about.present.events ~ Condition, data = micaela)
summary(presentevents.aov)
presentevents.aov <- aov(Thinking.about.present.events ~ fCondition, data = micaela)
summary(presentevents.aov)
presentevents.aov <- aov(Thinking.about.present.events ~ fCondition+Age, data = micaela)
summary(presentevents.aov)
presentevents.aov <- aov(Thinking.about.present.events ~ Condition+Age, data = micaela)
summary(presentevents.aov)
fCondition<-factor(micaela$Condition)
presentevents.aov <- aov(Thinking.about.present.events ~ fCondition+Age, data = micaela)
summary(presentevents.aov)
futureevents.aov <- aov(Thinking.about.future.events ~ fCondition, data = micaela)
summary(futureevents.aov)
psy15 <- read.csv("Desktop/psy15data.csv")
summary(psy15)
head(psy15)
dim(psy15)
totalscore <- strtoi(psy15$score)
is.numeric(totalscore)
fCondition<-factor(psy15$FL_9_DO)
aggregate(data=psy15, psy15$totalscore, list(fCondition), mean)
aggregate(data=psy15, psy15$totalscore, list(fCondition), mean)
aggregate(data=psy15, psy15$totalscore, list(Condition), mean)
score.aov <- aov(totalscore ~ fCondition, data = psy15)
summary(score.aov)
fCondition<-factor(psy15$FL_9_DO)
aggregate(data=psy15, psy15$score, list(fCondition), mean)
psy15$totalscore
totalscore <- strtoi(psy15$score)
is.numeric(totalscore)
psy15<-cbind(psy15, totalscore)
## Math score by condition
aggregate(data=psy15, psy15$totalscore, list(fCondition), mean)
score.aov <- aov(totalscore ~ fCondition, data = psy15)
summary(score.aov)
difficult <- strtoi(psy15$X.4)
difficult.aov <- aov(difficult ~ fCondition, data = psy15)
summary(difficult.aov)
aggregate(data=psy15, difficult, list(fCondition), mean)
easy1 <- strtoi(psy15$X)
easy2 <- strtoi(psy15$X.2)
easy <- easy1+easy2
easy.aov <- aov(easy ~ fCondition, data = psy15)
summary(easy.aov)
aggregate(data=psy15, easy, list(fCondition), mean)
med1 <- strtoi(psy15$X.1)
med2 <- strtoi(psy15$X.3)
medium <- med1+med2
medium.aov <- aov(medium ~ fCondition, data = psy15)
summary(medium.aov)
aggregate(data=psy15, medium, list(fCondition), mean)
score.aov <- aov(totalscore ~ fCondition, data = psy15)
summary(score.aov)
score.aov <- aov(totalscore ~ Condition, data = psy15)
summary(score.aov)
score.aov <- aov(totalscore ~ fCondition, data = psy15)
summary(score.aov)
score.aov <- aov(totalscore ~ fCondition, data = psy15)
summary(score.aov)
score.aov <- aov(totalscore ~ fCondition, data = psy15)
summary(score.aov)
aggregate(data=psy15, psy15$totalscore, list(fCondition), mean)
difficult.aov <- aov(difficult ~ fCondition, data = psy15)
summary(difficult.aov)
aggregate(data=psy15, difficult, list(fCondition), mean)
medium.aov <- aov(medium ~ fCondition, data = psy15)
summary(medium.aov)
aggregate(data=psy15, medium, list(fCondition), mean)
aggregate(data=psy15, easy, list(fCondition), mean)
easy.aov <- aov(easy ~ fCondition, data = psy15)
summary(easy.aov)
aggregate(data=psy15, medium, list(fCondition), mean)
aggregate(data=psy15, psy15$totalscore, list(fCondition), mean)
aggregate(data=psy15, psy15$totalscore, list(fCondition), sd)
aggregate(psy15$totalscore, list(fCondition), sd)
library(pwr)
pwr.anova.test(k = 2, n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
pwr.anova.test(k = 2, n = 30, f = 0.2, sig.level = 0.05, power = NULL)
pwr.anova.test(k = 2, n = 30, f = 0.2, sig.level = 0.05, power = NULL)
pwr.anova.test(k = 2, n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
pwr.anova.test(k = 2, n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
pwr.anova.test(k = 1, n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
pwr.anova.test(k = 2, n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
micaela <- read.csv("Desktop/CLEAN_DATA_FULL.csv")
micaela <- micaela[micaela$Exclude.==1, ]
posmood.aov <- aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela)
summary(posmood.aov)
micaela <- micaela[micaela$Exclude.==1, ]
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
numericAge <- strtoi(micaela$Age)
is.numeric(numericAge)
summary(numericAge)
summary(micaela$Age)
posmood.aov <- aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela)
fCondition<-factor(micaela$Condition)
posmood.aov <- aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela)
summary(posmood.aov)
TukeyHSD(posmood.aov, "fCondition")
micaela <- read.csv("Desktop/CLEAN_DATA_FULL.csv")
micaela <- micaela[micaela$Exclude.==1, ]
micaela$Condition <- factor(micaela$Condition)
micaela <- read.csv("Desktop/highest_quart_baseline_negmood.csv")
micaela <- micaela[micaela$Exclude.==1, ]
dim(micaela)
posmood.aov <- aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela)
summary(posmood.aov)
numericAge <- strtoi(micaela$Age)
is.numeric(numericAge)
micaela<-cbind(micaela, numericAge)
micaela$Condition <- factor(micaela$Condition)
posmood.aov <- aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela)
summary(posmood.aov)
## Post-Hoc
micaela <- read.csv("Desktop/highest_quart_baseline_negmood.csv")
micaela <- micaela[micaela$Exclude.==1, ]
posmood.aov <- aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela)
summary(posmood.aov)
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
TukeyHSD(negmood.aov, "fCondition")
numericAge
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
fCondition<-factor(micaela$Condition)
posmood.aov <- aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela)
summary(posmood.aov)
micaela <- read.csv("Desktop/highest_quart_baseline_negmood.csv")
## Exclusion Criteria
micaela <- micaela[micaela$Exclude.==1, ]
fCondition<-factor(micaela$Condition)
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
TukeyHSD(negmood.aov, "fCondition")
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition, data = micaela)
summary(negmood.aov)
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
negmood.aov <- aov(DIFF_NEG_MOOD ~ Condition+numericAge, data = micaela)
summary(negmood.aov)
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
numericAge
micaela <- read.csv("Desktop/highest_quart_baseline_negmood.csv")
## Exclusion Criteria
micaela <- micaela[micaela$Exclude.==1, ]
fCondition<-factor(micaela$Condition)
posmood.aov <- aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela)
summary(posmood.aov)
## Post-Hoc
etaSquared(aov(DIFF_POS_MOOD ~ fCondition+numericAge, data = micaela))
TukeyHSD(posmood.aov, "fCondition")
leveneTest(DIFF_NEG_MOOD ~ fCondition, data = micaela, center = mean)
numericAge
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
numericAge
negmood.aov <- aov(DIFF_NEG_MOOD ~ fCondition+numericAge, data = micaela)
summary(negmood.aov)
psy15 <- read.csv("Desktop/psy15data.csv")
psy15 <- read.csv("Desktop/psy15data.csv")
library(pwr)
pwr.t.test(k = 2, n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
fCondition<-factor(psy15$FL_9_DO)
Condition==1
aggregate(psy15$totalscore, list(fCondition), sd)
totalscore <- strtoi(psy15$score)
is.numeric(totalscore)
psy15<-cbind(psy15, totalscore)
aggregate(data=psy15, psy15$totalscore, list(fCondition), mean)
library(pwr)
pwr.t.test(n = NULL, f = 0.2, sig.level = 0.05, power = 0.8)
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample",alternative="two.sided")
pwr.t.test(d = 0.1, sig.level = 0.05, power = 0.8, type="two.sample",alternative="two.sided")
pwr.t.test(d = 0.4, sig.level = 0.05, power = 0.8, type="two.sample",alternative="two.sided")
pwr.t.test(d = 0.5, sig.level = 0.05, power = 0.8, type="two.sample",alternative="two.sided")
pwr.t.test(d = 0.8, sig.level = 0.05, power = 0.8, type="two.sample",alternative="two.sided")
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample",alternative="two.sided")
pwr.t.test(d = 1, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(d = 0.5, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 30, d = 0.2, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 30, d = 0.2, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 30, d = 0.4, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 30, d = 0.5, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
wr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="one.sided")
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
t.test(psy15$totalscore[psy15$Condition==1], psy15$totalscore[psy15$Condition==2])
t.test(psy15$totalscore ~ Condition)
t.test(psy15$totalscore ~ Condition, var.equal = TRUE)
t.test(psy15$totalscore ~ psy15$Condition, var.equal = TRUE)
is.numeric(Condition)
fCondition<-factor(psy15$FL_9_DO)
t.test(psy15$totalscore ~ fCondition, var.equal = TRUE)
t.test(psy15$totalscore ~ fCondition, var.equal = TRUE)
difficult <- strtoi(psy15$X.4)
t.test(difficult ~ fCondition, var.equal = TRUE)
aggregate(data=psy15, difficult, list(fCondition), mean)
t.test(easy ~ fCondition, var.equal = TRUE)
easy1 <- strtoi(psy15$X)
easy2 <- strtoi(psy15$X.2)
easy <- easy1+easy2
t.test(easy ~ fCondition, var.equal = TRUE)
med1 <- strtoi(psy15$X.1)
med2 <- strtoi(psy15$X.3)
medium <- med1+med2
t.test(medium ~ fCondition, var.equal = TRUE)
difficult <- strtoi(psy15$X.4)
t.test(difficult ~ fCondition, var.equal = TRUE)
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
library(pwr)
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="one.sided")
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(d = NULL, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(d = 0.5, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 30, d = 0.5, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 30, d = 0.2, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 30, d = 0.5, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
easy1 <- strtoi(psy15$X)
easy2 <- strtoi(psy15$X.3)
easy <- easy1+easy2
t.test(easy ~ fCondition, var.equal = TRUE)
med1 <- strtoi(psy15$X.1)
med2 <- strtoi(psy15$X.2)
medium <- med1+med2
t.test(medium ~ fCondition, var.equal = TRUE)
difficult <- strtoi(psy15$X.4)
t.test(difficult ~ fCondition, var.equal = TRUE)
t.test(medium ~ fCondition, var.equal = TRUE)
pwr.t.test(d = 0.5, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(d = 0.5, sig.level = 0.05, power = 0.8, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 30, d = 0.5, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 15, d = 0.5, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 15, d = 0.2, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
pwr.t.test(n = 15, d = 0.5, sig.level = 0.05, power = NULL, type="two.sample", alternative ="two.sided")
micaela <- read.csv("Desktop/CLEAN_DATA_FULL.csv")
micaela <- micaela[micaela$Exclude.==1, ]
head(micaela)
fCondition<-factor(micaela$Condition)
aggregate(numericAge, list(micaela$Condition), sd)
numericAge <- strtoi(micaela$Age)
is.numeric(numericAge)
aggregate(data=micaela, numericAge, list(micaela$Condition), mean)
aggregate(numericAge, list(micaela$Condition), sd)
aggregate(data=micaela, micaela$UCLA_TOTAL, list(micaela$Gender), mean)
loneliness.aov <- aov(UCLA_TOTAL ~ Gender+numericAge, data = micaela)
summary(loneliness.aov)
loneliness.aov <- aov(UCLA_TOTAL ~ Gender, data = micaela)
summary(loneliness.aov)
# DEPRESSION, ANXIETY SYMPTOMS IN KENYAN ADOLESCENTS -> PREVALENCE, CORRELATES ETC.
## Tom L. Osborn
## FEB 2020
base::rm(list = ls())
#install packages
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(psych)) {install.packages("psych"); require(psych)}
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
if (!require(ggstatsplot)) {install.packages("ggstatsplot"); require(ggstatsplot)}
if (!require(groupedstats)) {install.packages("groupedstats"); require(groupedstats)}
if (!require(GGally)) {install.packages("GGally"); require("GGally")}
if (!require(corrr)) {install.packages("corrr"); require("corrr")}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(apaTables)) {install.packages("apaTables"); require(apaTables)}
if (!require(MASS)) {install.packages("MASS"); require(MASS)}
if (!require(beanplot)) {install.packages("beanplot"); require("beanplot")}  ## package for bean plots   ## violin plots
if (!require(forcats)) {install.packages("forcats"); require("forcats")}
if (!require(boot)) {install.packages("boot"); require("boot")}
if (!require(gplots)) {install.packages("gplots"); require("gplots")}
if (!require(corrplot)) {install.packages("corrplot"); require(corrplot)}   ## plot correlation matrix
if (!require(mvtnorm)) {install.packages("mvtnorm"); require(mvtnorm)}
if (!require(lmPerm)) {install.packages("lmPerm"); require(lmPerm)}     ## permutation regression
if (!require(Hmisc)) {install.packages("Hmisc"); require(Hmisc)}
if (!require(forcats)) {install.packages("forcats"); require(forcats)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(PairedData)) {install.packages("PairedData"); require(PairedData)}  ## paired datasets
if (!require(effects)) {install.packages("effects"); require(effects)}
if (!require(pastecs)) {install.packages("pastecs"); require(pastecs)}
if (!require(sjPlot)) {install.packages("sjPlot"); require(sjPlot)}
if (!require(lattice)) {install.packages("lattice"); require(lattice)}
if (!require(lmerTest)) {install.packages("lmerTest"); require(lmerTest)}     ## uses lme4 package, gives p-values for regression parameters
if (!require(nlme)) {install.packages("nlme"); require(nlme)}
if (!require("mice")) {install.packages("mice"); require("mice")}
if (!require("VIM")) {install.packages("VIM"); require("VIM")}
if (!require("irr")) {install.packages("irr"); require("irr")}
if (!require("pwr")) {install.packages("pwr"); require("pwr")}
if (!require("apaTables")) {install.packages("apaTables"); require("apaTables")}
if (!require("glmnet")) {install.packages("glmnet"); require("glmnet")}
#set working directory to the directory where script is residing
groupedstats:::set_cwd()
base::rm(list = ls())
load('env.RData')
df <- mice::complete(df_imputed)
df <- df %>%
dplyr::mutate (
PHQ_Total = PHQ_1 + PHQ_2 + PHQ_3 + PHQ_4 + PHQ_5 + PHQ_6 + PHQ_7,
GAD_Total = GAD_1 + GAD_2 + GAD_3 + GAD_4 + GAD_5 + GAD_6 + GAD_7,
EPOCH_Happiness_Total = EPOCH_Happiness_1 + EPOCH_Happiness_2 + EPOCH_Happiness_3 + EPOCH_Happiness_4,
Gratitude_Total = Gratitude_1 + Gratitude_2 + Gratitude_3 + Gratitude_4 + Gratitude_5 + Gratitude_6,
UCLA_Total = UCLA_1 + UCLA_2 + UCLA_3 +UCLA_4 +UCLA_5 +UCLA_6 +UCLA_7 + UCLA_8,
MSSS_Total = MSSS_1 + MSSS_2 + MSSS_3 + MSSS_4 + MSSS_5 + MSSS_6 + MSSS_7 + MSSS_8 + MSSS_9 + MSSS_10 + MSSS_11 + MSSS_12,
MSSS_SO = MSSS_1 + MSSS_2 + MSSS_5 +  MSSS_10,
MSSS_Fam = MSSS_3 + MSSS_4 + MSSS_8 + MSSS_11,
MSSS_Friends = MSSS_6 + MSSS_7 + MSSS_9 + MSSS_12,
)
#descriptives and correlates
corTable <- df %>%
dplyr::select(
UCLA_Total, MSSS_Total, MSSS_SO, MSSS_Fam, MSSS_Friends,
EPOCH_Happiness_Total, Gratitude_Total
)
apa.cor.table(corTable, filename = "correlations.doc", table.number = 1)
psych::describeBy(df$UCLA_Total, df$Gender)
t.test(df$UCLA_Total~df$Gender)
df$School
summary(loneliness.lm)
loneliness.lm <- lmer(UCLA_Total ~ Age + Gender + Tribal_Classification + Financial_Status +
(1|School), data = shamiri)
summary(loneliness.lm)
#calculate standard beta
stdCoef.merMod <- function(object) {
sdy <- sd(getME(object,"y"))
sdx <- apply(getME(object,"X"), 2, sd)
sc <- fixef(object)*sdx/sdy
se.fixef <- coef(summary(object))[,"Std. Error"]
se <- se.fixef*sdx/sdy
return(data.frame(stdcoef=sc, stdse=se))
}
stdCoef.merMod(loneliness.lm)
summary(loneliness.lm)
library(simr)
simdata
table(simdata$y)
table(simdata$z)
table(simdata$g)
model1 <- glmer(z ~ x + (1|g), data = simdata)
summary(model1)
summary(model1)
model1 <- glmer(z ~ x + (1|g),family = 'poisson', data = simdata)
summary(model1)
fixef(model1)['x']
fixef(model1)['x'] <- -.05
summary(model1)
set.seed(123)
powerSim(model1)
simdata$g
simdata$x
model2 <- extend(model1, along = 'x', n=20)
powerSim(model2)
rm(list = ls())
#load packages
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ggpubr)) {install.packages("ggpubr"); require(ggpubr)}
if (!require(boot)) {install.packages("boot"); require(boot)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(sjPlot)) {install.packages("sjPlot"); require(sjPlot)}
if (!require(ggstatsplot)) {install_github("IndrajeetPatil/ggstatsplot");
require(ggstatsplot)}
if (!require(lmerTest)) {install.packages("lmerTest"); require(lmerTest)}
if (!require(nlme)) {install.packages("nlme"); require(nlme)}
if (!require(rmarkdown)) {install.packages("rmarkdown"); require(rmarkdown)}
if (!require(gridExtra)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(simr)) {install.packages("simr"); require(simr)}
#set working directory to the direct
#set working directory to the directory where script is residing
groupedstats:::set_cwd()
df <- read_csv('study_1_human_crits.csv')
#relevel for graphing
df$common.fac <- factor(df$last.common, levels = c(0,1),
labels = c('Rare','Common'))
df$common.fac <- relevel(df$common.fac, ref = "Common")
df$rewarded.fac <- factor(df$last.reward.sign,levels = c(F,T),
labels = c("Punished","Rewarded"))
df$rewarded.fac <- relevel(df$rewarded.fac, ref = "Rewarded")
df.bysubj <- df %>%
na.omit()%>%
dplyr::group_by(rewarded.fac, common.fac, subject) %>%
dplyr::summarize(
prob.stay = mean(repeated, na.rm = TRUE)
)
df.agg <- df.bysubj %>%
dplyr::group_by(common.fac, rewarded.fac) %>%
dplyr::summarize(
prob.stay.mean = mean(prob.stay),
prob.stay.se = sd(prob.stay)/sqrt(n())
)
#plot
ggplot(df.agg, aes(x=rewarded.fac, y = prob.stay.mean,fill = common.fac)) +
geom_bar(
stat = 'identity',
position = position_dodge(width = .9),
width = .9
) +
geom_errorbar(
aes(ymin = prob.stay.mean - prob.stay.se, ymax = prob.stay.mean + prob.stay.se),
width = .2,
position = position_dodge(width = .9)
) +
theme(legend.text = element_blank(), legend.title = element_blank(), legend.position = 'none',
plot.title = element_text(hjust=0.5, size = 14),
panel.border = element_rect(colour = "black", fill = NA, size = 2),
panel.background = element_rect(colour = "white", fill = NA)) +
scale_fill_manual(values = c("Common" = "#C02739", "Rare" = "#29C7AC")) +
coord_cartesian(ylim=c(0,.7)) +
labs(fill = 'Transition',
y = 'Stay probability',
x = '',
title = 'Person condition')
## MODEL
#center data
df$rewarded <-  df$rewarded - mean (df$rewarded, na.rm = TRUE)
df$common <-  df$common - mean(df$common, na.rm = TRUE)
df$cXr <-  df$rewarded *  df$common
df <- df %>%
na.omit(df)
model <- glmer(repeated ~ rewarded + common + cXr +
(1 + rewarded + common + cXr|subject) + (1|matched_player_id),
data = df,family = binomial)
summary(model)
model.extend <- extend(model, within = 'rewarded,common', n = 500)
#extend to 300 subjects
model2 <- extend(model1, along = "subject", n = 300)
#extend to 300 subjects
model2 <- extend(model, along = "subject", n = 300)
pc1 <- powerCurve(model2, along = 'g')
pc1 <- powerCurve(model2, along = 'subject')
pc1 <- powerCurve(model2, along = 'subject', nsim=10)
table(df$subject)
df <- read_csv('study_1_human_crits.csv')
df$common.fac <- factor(df$last.common, levels = c(0,1),
labels = c('Rare','Common'))
df$common.fac <- relevel(df$common.fac, ref = "Common")
df$rewarded.fac <- factor(df$last.reward.sign,levels = c(F,T),
labels = c("Punished","Rewarded"))
df$rewarded.fac <- relevel(df$rewarded.fac, ref = "Rewarded")
df$rewarded <-  df$rewarded - mean (df$rewarded, na.rm = TRUE)
df$common <-  df$common - mean(df$common, na.rm = TRUE)
df$cXr <-  df$rewarded *  df$common
table(df$subject)
df <- df %>%
na.omit(df)
counte(df$subject)
count(df$subject)
model1 <- glmer(repeated ~ rewarded + common + cXr +
(1 + rewarded + common + cXr|subject) + (1|matched_player_id),
data = df,family = binomial)
#extend to 300 subjects
model2 <- extend(model, along = "subject", n = 100)
df.1 <- getData(model2)
#extend to 300 subjects
model2 <- extend(model, along = "subject", n = 300)
df.1 <- getData(model2)
#extend to 500 subjects
model2 <- extend(model, along = "subject", n = 300)
#extend to 500 subjects
model2 <- extend(model, along = "subject", n = 500)
model_extended <-  glmer(repeated ~ rewarded + common + cXr +
(1 + rewarded + common + cXr|subject) + (1|matched_player_id),
data = df.1,family = binomial)
summary(model_extended)
summary(model1)
pc1 <- powerCurve(model2, along = 'subject', nsim=100)
print(pc1)
plot(pc1)
