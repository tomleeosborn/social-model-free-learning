my_data$Condition <- as.factor(my_data$Condition)
my_data$Social_media <- as.factor(my_data$Social_media)
my_data$Time_on_social_media <- as.factor(my_data$Time_on_social_media)
my_data$Preferred_communication <- as.factor(my_data$Preferred_communication)
my_data$Gender <- as.factor(my_data$Gender)
my_data$Race <- as.factor(my_data$Race)
my_data$Identity <- as.factor(my_data$Identity)
## descriptives
with(my_data, by(Condition, list(Likelihood_of_dating, Attraction, Confidence, Intelligence, Long_term_date)),
stat.desc, norm = TRUE)
## descriptives
with(my_data, by(Condition, list(Likelihood_of_dating, Attraction, Confidence, Intelligence, Long_term_date)),
stat.desc(), norm = TRUE)
## descriptives
with(my_data, by(Condition, list(Likelihood_of_dating,Attraction,Confidence,Intelligence, Long_term_date),
stat.desc, norm = TRUE))
sapply(my_data, typeof)
my_data$Subject_ID <- as.factor(my_data$Subject_ID)
my_data$Relationship_status <- as.factor(my_data$Relationship_status)
my_data$Length_of_relationship <- as.factor(my_data$Length_of_relationship)
my_data$Condition <- as.factor(my_data$Condition)
my_data$Social_media <- as.factor(my_data$Social_media)
my_data$Time_on_social_media <- as.factor(my_data$Time_on_social_media)
my_data$Preferred_communication <- as.factor(my_data$Preferred_communication)
my_data$Gender <- as.factor(my_data$Gender)
my_data$Race <- as.factor(my_data$Race)
my_data$Identity <- as.factor(my_data$Identity)
sapply(my_data, typeof)
my_data <- read_csv("Desktop/Spring 2019/Psych 1901/true_love_clean_data.csv")
sapply(my_data, typeof)
my_data$Subject_ID <- as.factor(my_data$Subject_ID)
my_data$Relationship_status <- as.factor(my_data$Relationship_status)
my_data$Length_of_relationship <- as.factor(my_data$Length_of_relationship)
my_data$Condition <- as.factor(my_data$Condition)
my_data$Social_media <- as.factor(my_data$Social_media)
my_data$Time_on_social_media <- as.factor(my_data$Time_on_social_media)
my_data$Preferred_communication <- as.factor(my_data$Preferred_communication)
my_data$Gender <- as.factor(my_data$Gender)
my_data$Race <- as.factor(my_data$Race)
my_data$Identity <- as.factor(my_data$Identity)
sapply(my_data, typeof)
my_data$Relationship_status
my_data$Likelihood_of_dating
## descriptives
with(my_data, by(Condition, Likelihood_of_dating,
stat.desc, norm = TRUE))
## descriptives
with(my_data, by(Condition, Likelihood_of_dating,
stat.desc(), norm = TRUE))
## descriptives
with(my_data, by(Condition, Likelihood_of_dating,
describeBy, norm = TRUE))
sapply(my_data, typeof)
my_data$Condition
describeBy?
## --- Descriptives for all factor combinations
with(honk, by(duration, list(car, sex), stat.desc, norm = TRUE))
??describeBy
describeBy(my_data$Likelihood_of_dating, my_data$Condition)
describeBy(my_data$Attraction, my_data$Condition)
describeBy(my_data$Confidence, my_data$Condition)
describeBy(my_data$Intelligence, my_data$Condition)
describeBy(my_data$Long_term_date, my_data$Condition)
ggplot(my_data, aes(Condition,Likelihood_of_dating))+
geom_bar(stat = 'mean')
ggplot(my_data, aes(Condition,Likelihood_of_dating))+
geom_bar(stat = 'identity')
geom_boxplot()
ggplot(my_data, aes(Condition,Likelihood_of_dating))+
geom_bar(stat = 'identity')
ggplot(my_data, aes(Condition,Likelihood_of_dating))+
geom_boxplot()
##plot the descriptives as b
boxplot(my_data$Condition ~ my_data$Likelihood_of_dating)
##plot the descriptives as b
boxplot(Condition ~ Likelihood_of_dating, data = my_data)
##plot the descriptives as b
boxplot(my_data$Likelihood_of_dating)
##plot the descriptives as b
boxplot(my_data$Likelihood_of_dating ~ my_data$Condition)
?barplot
boxplot(my_data$Attraction~ my_data$Condition)
boxplot(my_data$Intelligence ~ my_data$Condition)
boxplot(my_data$Confidence ~ my_data$Condition)
boxplot(my_data$Intelligence ~ my_data$Condition)
boxplot(my_data$Long_term_date ~ my_data$Condition)
##plot the descriptives as boxplots
boxplot(my_data$Likelihood_of_dating ~ my_data$Condition, main="Boxplot of DV by Conditions",
xlab="Condition", ylab="Likelihood_of_dating ")
boxplot(my_data$Attraction~ my_data$Condition,  main="Boxplot of DV by Conditions",
xlab="Condition", ylab="Attraction ")
boxplot(my_data$Confidence ~ my_data$Condition, main="Boxplot of DV by Conditions",
xlab="Condition", ylab="Confidence ")
boxplot(my_data$Intelligence ~ my_data$Condition, main="Boxplot of DV by Conditions",
xlab="Condition", ylab="Intelligence ")
boxplot(my_data$Long_term_date ~ my_data$Condition,  main="Boxplot of DV by Conditions",
xlab="Condition", ylab="Long_term_date ")
()
op <- par(mfrow = c(1,2))
with(my_data, interaction.plot(Gender, Condition, Likelihood_of_dating, ylab = "Likelihood_of_dating", type = "b", pch = 19,
lty = 1, col = 1:2, main = "Interaction Plot Gender * COndition", legend = FALSE))
with(my_data, interaction.plot(Social_media, Condition, Likelihood_of_dating, ylab = "Likelihood_of_dating", type = "b", pch = 19,
lty = 1, col = 1:2, main = "Interaction Plot Gender * COndition", legend = FALSE))
## build a model and add covariate
fitaov1 <- aov(Likelihood_of_dating ~ Condition, data = my_data)
summary(fitaov1)                                ## interaction significant, disordinal, interpret by means of interaction plot
## The aov() function computes so called "Type I SS", which is not a good idea for unbalanced designs. Better:
Anova(fitaov1, type = "II")
Anova(fitaov1, type = "III")
## The aov() function computes so called "Type I SS", which is not a good idea for unbalanced designs. Better:
Anova(fitaov1, type = "II")
lm1 <- lm((Likelihood_of_dating ~ Condition, data = my_data)
lm1 <- lm(Likelihood_of_dating ~ Condition, data = my_data)
Anova(lm1)
## build a model and add covariate
lm1 <- lm(Likelihood_of_dating ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
Anova(lm1)
fitaov1 <- aov(Likelihood_of_dating ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(fitaov1)
lm2 <- lm(Attraction ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
Anova(lm2)
summary(lm3)
summary(lm2)
lm3 <- lm(Attraction ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
Anova(lm3)
lm3 <- lm(Confidence ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
Anova(lm3)
lm4 <- lm(Intelligence ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
Anova(lm4)
lm5 <- lm(Long_term_date ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
Anova(lm5)
## build a model anova approach, less stricter
aov1 <- aov(Likelihood_of_dating ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(aov1)
aov2 <- aov(Attraction ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(aov2)
aov3 <- aov(Confidence ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(aov3)
aov3 <- aov(Confidence ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(aov3)
aov3 <- aov(Confidence ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(aov3)
aov2 <- aov(Attraction ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(aov2)
aov4 <- aov(Intelligence ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(aov4)
aov5 <- aov(Long_term_date ~ Condition + Social_media + Time_on_social_media + Preferred_communication
+ Gender + Age + Race + Identity, data = my_data)
summary(aov5)
Anova(lm1)
#<_________________________________________________________________________________
# grades Pilot Data Analysis, Dec 18 - Jan 19 (Mixed Effects Models Only)
# Tom Osborn
######## cleaning up environment
rm(list = ls())
#<----------------------- PART TWO: EXPLORATORY DATA ANALYSIS -------------
#install packages
set.seed(102)
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(psych)) {install.packages("psych"); require(psych)}
if (!require(boot)) {install.packages("boot"); require(boot)}
if (!require(treemap)) {install.packages("treemap"); require(treemap)}
if (!require(WRS2)) {install.packages("WRS2"); require(WRS2)}
if (!require(ggstatsplot)) {install_github("IndrajeetPatil/ggstatsplot"); require(ggstatsplot)}
if (!require(lmerTest)) {install.packages("lmerTest"); require(lmerTest)}     ## uses lme4 package, gives p-values for regression parameters
if (!require(nlme)) {install.packages("nlme"); require(nlme)}
if (!require(reshape)) {install.packages("reshape"); require(reshape)}
if (!require(lattice)) {install.packages("lattice"); require(lattice)}
if (!require(plyr)) {install.packages("plyr"); require(plyr)}
if (!require(car)) {install.packages('car'); require(car)}
if (!require(effects)) {install.packages("effects"); require(effects)}
if (!require("EMAtools")) {install.packages("EMAtools"); require("EMAtools")}
if (!require("sjstats")) {install.packages("sjstats"); require("sjstats")}
if (!require("sjPlot")) {install.packages("sjPlot"); require("sjPlot")}
if (!require("visreg")) {install.packages("visreg"); require("visreg")}
if (!require("mice")) {install.packages("mice"); require("mice")}
if (!require("VIM")) {install.packages("VIM"); require("VIM")}
if (!require("irr")) {install.packages("irr"); require("irr")}
if (!require("pwr")) {install.packages("pwr"); require("pwr")}
# set working directory to directory where R script is residing
groupedstats:::set_cwd()
my_Data <- read_csv('Downloads/1901-2.csv')
View(my_Data)
ggplot(my_Data) +
aes(x = my_Data$Q18)+
geom_bar(stat = 'identity')
ggplot(my_Data) +
aes(y = my_Data$Q18)+
geom_bar(stat = 'identity')
my_Data$Q18
my_Data$`Gender Identity`
ggplot(my_Data) +
aes(x = my_Data$`Gender Identity`, y = my_Data$Q18)+
geom_bar(stat = 'identity')
sapply(my_Data, typeof)
my_Data$`Gender Identity` <- as.factor(my_Data$`Gender Identity`)
my_Data$Q18 <- as.factor(my_Data$Q18)
my_Data$`Gender Identity`
my_Data$Q18
tbl <- table(my_Data$`Gender Identity`, my_Data$Q18)
tbl
my_Data %>%
filter(`Gender Identity`=='Cis Man' & Q18 == "Imagining  your partner enjoying passionate sexual intercourse with that other person")
my_Data %>%
filter(`Gender Identity`=='Cis Man')
tbl
psych1901Chi <- chisq.test(tbl)
psych1901Chi
psych1901Chi$statistic
psych1901Chi$observed
psych1901Chi$expected
barplot(psych1901Chi$expected()
barplot(psych1901Chi$expected)
barplot(psych1901Chi$expected)
barplot(psych1901Chi$observed)
tbl <- data.frame(tbl)
tb
tbl
View(my_Data)
View(my_Data)
View(tbl)
tbl %>%
filter(
Var1=='Cis Man' &
Var1 =='Trans Man' &
Var1 == 'Trans Woman'
)
tbl %>%
filter(
Var1=='Cis Man' |
Var1 =='Trans Man' |
Var1 == 'Trans Woman'
)
tbl %>%
filter(
Var1=='Cis Man' |
Var1 =='Trans Man' |
Var1 == 'Cis Woman'
)
table1 <- table(tbl$Var1, tbl$Var2)
table1
chisq.test(table1)
a <- chisq.test(table1)
a
barplot(a$observed)
transmen <- read_csv('Downloads/1901-2_transmen.csv')
transwomen <- read_csv('Downloads/1901-2_transwomen.csv')
tbl_transmen <- (transmen$`Gender Identity`, transmen$Q18)
chi_transmen <- chisq.test(tbl_transmen)
tbl_transmen <- table(transmen$`Gender Identity`, transmen$Q18)
chi_transmen <- chisq.test(tbl_transmen)
chi_transmen
barplot(chi_transmen$observed)
transmen$`Gender Identity`
barplot(chi_transmen$observed, legend.text = c('Cis Man','Cis Woman','Trans Man') )
chi_transmen$observed
ggplot(chi_transmen$observed) +
aes(x=chi_transmen$observed[1], y=chi_transmen$observed[2])
barplot(chi_transmen$observed)
legend(2.8,-1,c('Cis Man','Cis Woman','Trans Man'), pch = c(1,2), lty = c(1,2))
par()
barplot(chi_transmen$observed)
legend(2.8,-1,c('Cis Man','Cis Woman','Trans Man'), pch = c(1,2), lty = c(1,2))
dev.off()
op <- par(mfrow = c(1,2))
par(op)
barplot(chi_transmen$observed)
legend(2.8,-1,c('Cis Man','Cis Woman','Trans Man'), pch = c(1,2), lty = c(1,2))
legend(c('Cis Man','Cis Woman','Trans Man'), pch = c(1,2), lty = c(1,2))
chi_transmen
group_leaders <- c('saline','dorothy','pauline','limbe','denver','tryphosa',
'sherllete','val','saline','frank','patricia','denver')
group_leaders[sample(nrow(group_leaders),3),]
df <- data.frame(group_leaders)
View(df)
df[sample(nrow(df), 3), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
df[sample(nrow(df), 6), ]
# DATA ANALYSIS PLAN -> TOM OSBORN SENIOR THESIS
# MORALITY LAB, HARVARD
# THESIS ADVISOR -> PROF. FIERY CUSHMAN
# SEPTEMBER 2019, EMAIL OSBORN@COLLEGE.HARVARD.EDU
#------------------------------------------------------------------------------#
######## cleaning up environment
rm(list = ls())
mad
#set seed
set.seed(102)
#load packages
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(psych)) {install.packages("psych"); require(psych)}
if (!require(boot)) {install.packages("boot"); require(boot)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(ggstatsplot)) {install_github("IndrajeetPatil/ggstatsplot");
require(ggstatsplot)}
if (!require(lmerTest)) {install.packages("lmerTest"); require(lmerTest)}
if (!require(nlme)) {install.packages("nlme"); require(nlme)}
if (!require(reshape)) {install.packages("reshape"); require(reshape)}
if (!require(rmarkdown)) {install.packages("rmarkdown"); require(rmarkdown)}
if (!require(rmarkdown)) {install.packages("effects"); require(effects)}
if (!require(rmarkdown)) {install.packages("gridExtra"); require(gridExtra)}
if (!require(MASS)) {install.packages("MASS"); require(MASS)}
#set working directory to the directory where script is residing
groupedstats:::set_cwd()
#load data
df <- read_csv('social_learning_study_1.csv') #main dataset
#set working directory to the directory where script is residing
groupedstats:::set_cwd()
#load data
df <- read_csv('social_learning_study_1.csv') #main dataset
#load data
df <- read_csv('social_learning_study_1.csv') #main dataset
#set working directory to the directory where script is residing
groupedstats:::set_cwd()
#load data
df <- read_csv('social_learning_study_1.csv') #main dataset
demo <-read_csv('demo.csv')
#Remove players who finished the experiment in greater than 60 minutes //probably doing other things
demo %>%
dplyr::filter(
time_elapsed >3600000
) %>%
dplyr::select(
as.character(subject)
) -> exclude_subjects
exclude.subj <- as.character(demo$subject[demo$time_elapsed >3600000])
df %>% #remove these players (15)
dplyr::filter(
!(as.character(subject) %in% exclude.subj)
) -> df
#DATA CLEANING
#filter out practice trials
df <- df %>%
dplyr::filter(practice==0)
#load data
df <- read_csv('social_learning_study_1.csv') #main dataset
demo <-read_csv('demo.csv')
#REMOVE OUTLIERS AND BAD DATA
#Remove players who finished the experiment in greater than 60 minutes //probably doing other things
demo %>%
dplyr::filter(
time_elapsed >3600000
) %>%
dplyr::select(
as.character(subject)
) -> exclude_subjects
exclude.subj <- as.character(demo$subject[demo$time_elapsed >3600000])
df %>% #remove these players (15)
dplyr::filter(
!(as.character(subject) %in% exclude.subj)
) -> df
#DATA CLEANING
#filter out practice trials
df <- df %>%
dplyr::filter(practice==0)
demo %>%
dplyr::filter(
time_elapsed >3600000
) %>%
dplyr::select(
as.character(subject)
) -> exclude_subjects
demo %>%
dplyr::filter(
time_elapsed >3600000
)
dplyr::select(
as.character(subject)
demo$subject
#Remove players who finished the experiment in greater than 60 minutes //probably doing other things
demo %>%
dplyr::filter(
time_elapsed >3600000
) %>%
dplyr::select(
subject
) -> exclude_subjects
exclude.subj <- as.character(demo$subject[demo$time_elapsed >3600000])
df %>% #remove these players (15)
dplyr::filter(
!(as.character(subject) %in% exclude.subj)
) -> df
#filter out practice trials
df <- df %>%
dplyr::filter(practice==0)
#make matched_player_id and subject_id as factors
df$matched_player_id <- as.factor(df$matched_player_id)
df$subject <- as.factor(df$subject)
single_df <- df %>%
dplyr::filter(
condition == "single"
)
#mutate and add necessary columns
single_df <- single_df %>%
mutate(last.reward = lag(Re)) %>%
mutate(last.common = lag(common))%>%
mutate(last.reward.sign = last.reward>=0)%>%
mutate(repeated = Action1==lag(Action1))
#remove trials that took >2ms (see Daw 2011)
single_df <- single_df %>%
dplyr::filter(
rt1 <= 4000
)
single_df %>%
dplyr::select(
-c(Action1, Re)
) -> data
data
single_df <- single_df %>%
dplyr::filter(
rt1 <= 4000
)
single_df %>%
dplyr::select(
c(Action1, Re)
) -> data
data
write_excel_csv(data, 'single_player_data.csv')
#------------------------------------------------------------------------------#
######## cleaning up environment
rm(list = ls())
#set seed
set.seed(102)
#load packages
if (!require(devtools)) {install.packages("devtools"); require(devtools)}
if (!require(tidyverse)) {install.packages("tidyverse"); require(tidyverse)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(psych)) {install.packages("psych"); require(psych)}
if (!require(boot)) {install.packages("boot"); require(boot)}
if (!require(lme4)) {install.packages("lme4"); require(lme4)}
if (!require(ggstatsplot)) {install_github("IndrajeetPatil/ggstatsplot");
require(ggstatsplot)}
groupedstats:::set_cwd()
df <- read_csv('data/osborn_social_mf_data.csv')
df <- read_csv('data/osborn_social_mf_data.csv')
demo <- read_csv('data/osborn_social_mf_demo.csv')
demo %>%
dplyr::filter(
time_elapsed >3600000
) %>%
dplyr::select(
as.character(subject)
) -> exclude_subjects
#REMOVE OUTLIERS
#Took >60 minutes on task
exclude.subj <- as.character(demo$subject[demo$time_elapsed >3600000])
df %>% #remove these players (4)
dplyr::filter(
!(as.character(subject) %in% exclude.subj)
) -> df
demo <- read_csv('data/osborn_social_mf_demo.csv')
df %>% #remove these players (4)
dplyr::filter(
!(as.character(subject) %in% exclude.subj)
)
exclude.subj
df %>% #remove these players (4)
dplyr::filter(
!(as.character(subject) %in% exclude.subj)
)
df %>% #remove these players (4)
dplyr::filter(
!(as.character(subject) %in% exclude.subj)
) -> df
#filter out practice trials
df <- df %>%
dplyr::filter(practice==0)
unique(social_df$S2[social_df$current_player==2])
unique(df$S2[df$current_player==2])
df$S2[df$current_player==2] <- df$pre_S2[df$current_player==2]
table(df$S2[df$current_player==2])
table(df$agent_S2[df$current_player==2])
table(df$S2[df$current_player==2])
df$S2[df$current_player==2] <- df$agent_S2[df$current_player==2]
table(df$trial_n)
write_csv(df, 'data/osborn_data_cleaned.csv')
#set working directory to the directory where script is residing
groupedstats:::set_cwd()
rm(list = ls())
df.sigmaMF <- read_csv('AIC_SIGMA_MF.csv')
df.NOsigmaMF <- read_csv('AIC_NO_SIGMA_MF.csv')
#describe
psych::describe(df.sigmaMF$AIC)
psych::describe(df.NOsigmaMF$AIC)
t.test(df.sigmaMF$AIC,  df.NOsigmaMF$AIC)
